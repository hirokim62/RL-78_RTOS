CS+ V6.00.00  [16 Jun 2017] [プロパティ - CC-RL のプロパティ]
2022年12月18日 10:58:51
プロジェクト名 : test
ツール : R5F104LE, CC-RL, RL78 EZ Emulator, 端子配置, プログラム解析, コード生成
------------------------------------------------------------------------------
 カテゴリ                        名前                                                                      値                                                                アクティブ・ヘルプ
[共通オプション]
 ビルド・モード                                                                                                                                                              
                                 ビルド・モード                                                            DefaultBuild                                                      ビルド時に使用するビルド・モード名を選択します。
                                 すべてのビルド・モードのプロパティを一括して変更する                      いいえ                                                            プロパティに値を設定する際、設定した値をすべてのビルド・モードに反映するかどうかを選択します。設定した値が他のビルド・モードの値として適していない可能性もあるため充分ご注意ください。
 CPU                                                                                                                                                                         
                                 CPUコアの指定                                                             RL78-S3コア(-cpu=S3)                                              CPUコアを表示します。ccrlコマンドの-cpuオプションに相当します。
 出力ファイルの種類と場所                                                                                                                                                    
                                 出力ファイルの種類                                                        実行形式(ロード・モジュール・ファイル)                            ビルド時に生成するファイルの種類を選択します。ここで設定したファイルの種類がデバッグ対象となります。
                                 クロス・リファレンス情報を出力する                                        いいえ                                                            クロス・リファレンス情報を出力するかどうかを選択します。本プロパティを変更するには、“プログラム解析”のプロパティの設定を変更する必要があります。本オプションを有効にするとビルド処理速度が低下しますが、関数ジャンプ等の機能が使用可能になります。ccrlコマンドの-crefオプションに相当します。
                                 中間ファイル出力フォルダ                                                  %BuildModeName%                                                   中間ファイルを出力するフォルダを指定します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。ccrlコマンドの-obj_pathオプションまたは-oオプションに相当します。
 よく使うオプション(コンパイル)                                                                                                                                              
                                 最適化レベル                                                              既定の最適化を行う(なし)                                          コンパイルの最適化レベルを選択します。ccrlコマンドの-Oオプションに相当します。
                                 +追加のインクルード・パス                                                 追加のインクルード・パス[2]                                       コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                  [0]                                                                      cg_src                                                            コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                  [1]                                                                      .                                                                 コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 システム・インクルード・パス                                              システム・インクルード・パス[0]                                   コンパイル時にシステムが設定するインクルード・パスです。システム・インクルード・パスは、追加のインクルード・パスより低い優先度で検索されます。なお、パスはプロジェクト・フォルダを基点とします。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 定義マクロ                                                                定義マクロ[0]                                                     定義したいマクロ名を「(マクロ名)=(定義値)」の形式で1行に1つずつ指定します。「=(定義値)」の部分は省略可能で、省略した場合、定義値を1とします。ccrlコマンドの-Dオプションに相当します。
 よく使うオプション(アセンブル)                                                                                                                                              
                                 追加のインクルード・パス                                                  追加のインクルード・パス [0]                                      アセンブル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 システム・インクルード・パス                                              システム・インクルード・パス [0]                                  アセンブル時にシステムが設定するインクルード・パスです。システム・インクルード・パスは、追加のインクルード・パスより低い優先度で検索されます。なお、パスはプロジェクト・フォルダを基点とします。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 定義マクロ                                                                定義マクロ [0]                                                    定義したいマクロ名を「(マクロ名)=(定義値)」の形式で1行に1つずつ指定します。「=(定義値)」の部分は省略可能で、省略した場合、定義値を1とします。ccrlコマンドの-asmopt=-defineオプションに相当します。
 よく使うオプション(リンク)                                                                                                                                                  
                                 使用するライブラリ・ファイル                                              使用するライブラリ・ファイル[0]                                   使用するライブラリ・ファイルを指定します。rlinkコマンドの-LIBraryオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 出力フォルダ                                                              %BuildModeName%                                                   出力フォルダを指定します。空欄の場合は、プロジェクト・フォルダが指定されたものとして扱います。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 出力ファイル名                                                            %ProjectName%.abs                                                 出力ファイル名を指定します。拡張子が省略されている場合は.absが自動的に付加されます。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%ProjectName%・・・プロジェクト名に置換します。
                                 標準・数学ライブラリを使用する                                            はい                                                              コンパイラが提供する標準・数学ライブラリを使用するかどうかを選択します。
                                 ランタイム・ライブラリを使用する                                          はい                                                              コンパイラが提供するランタイム・ライブラリを使用するかどうかを選択します。
 よく使うオプション(ヘキサ出力)                                                                                                                                              
                                 ヘキサ・ファイルを出力する                                                はい                                                              ヘキサ・ファイルを出力するかどうかを選択します。rlinkコマンドの-FOrmオプションに相当します。
                                 ヘキサ・ファイル・フォーマット                                            モトローラ・Sタイプ・ファイル(-FOrm=Stype)                        ヘキサ・ファイル・フォーマットを選択します。rlinkコマンドの-FOrmオプションに相当します。
                                 出力フォルダ                                                              %BuildModeName%                                                   ヘキサ・ファイル出力フォルダを指定します。空欄の場合は、プロジェクト・フォルダが指定されたものとして扱います。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 出力ファイル名                                                            %ProjectName%.mot                                                 ヘキサ・ファイル名を指定します。拡張子が省略されている場合は[ヘキサ・ファイル・フォーマット]プロパティに依存し、自動的に付加します。”インテル拡張ヘキサ・ファイル(-FOrm=Hexadecimal)”：.hex”モトローラ・Sタイプ・ファイル(-FOrm=Stype)”：.mot”バイナリ・ファイル(-FOrm=Binary)”：.binrlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%ProjectName%・・・プロジェクト名に置換します。
                                 分割出力ファイル                                                          分割出力ファイル[0]                                               ヘキサ・ファイルを「<ファイル名>{=<先頭アドレス>-<終了アドレス>|<セクション名>[:...]}」の形式で１行に１つずつ指定します。アドレスは0xなしの16進数で指定してください。拡張子が省略されている場合は[ヘキサ・ファイル・フォーマット]プロパティに依存し、自動的に付加します。”インテル拡張ヘキサ・ファイル(-FOrm=Hexadecimal)”：.hex”モトローラ・Sタイプ・ファイル(-FOrm=Stype)”：.mot”バイナリ・ファイル(-FOrm=Binary)”：.binrlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
 エラー出力                                                                                                                                                                  
                                 エラー・メッセージ・ファイルをマージする                                  いいえ                                                            エラー・メッセージ・ファイルを出力しマージするかどうかを選択します。ccrlコマンドの-error_fileオプションに相当します。
 警告メッセージ                                                                                                                                                              
                                 表示させない警告メッセージ                                                                                                                  表示させない警告メッセージを設定します。複数指定する場合は、メッセージ番号を”,”(カンマ)で区切って指定します(例：20009,20011)。また,”-“(ハイフン)を使用し、区間の設定もできます(例1：20000-20100 例2：20000-20100,20300-20500)。ccrlコマンドの-no_warning_numオプションに相当します。
 デバイス                                                                                                                                                                    
                                 ミラー領域指定                                                            MAA=0(なし)                                                       RAM空間にミラーされるセグメントを配置する領域を選択します。このプロパティを変更した場合、[リンク・オプション]タブの[セクション]カテゴリの[セクションの開始アドレス]プロパティの再設定が必要になります。このオプションの詳細に関してはデバイスのマニュアルを参照してください。ccrlコマンドの-asmopt=-mirror_sourceオプションに相当します。
                                 セキュリティID                                                            00000000000000000000                                              フラッシュ・メモリ搭載デバイスのセキュリティIDを指定します。16 進数で20 桁（10 バイト）を入力してください。rlinkコマンドの-SECURITY_IDオプションに相当します。
 ビルド方法                                                                                                                                                                  
                                 一括ビルドを行う                                                          はい                                                              複数のファイルを同時にコンパイル／アセンブルするかどうかを選択します。
                                 パラレル・ビルドを行う                                                    いいえ                                                            パラレル・ビルド機能を有効にするかどうかを選択します。パラレル・ビルド機能により複数のソース・ファイルを同時にコンパイル／アセンブルすることで、より速くコンパイル／アセンブルすることができます。CS+はコンピュータが搭載しているすべてのプロセッサを使用してパラレル・ビルドを行います。
                                 インクルード・ファイルが見つからないソースの扱い                          再コンパイル／アセンブルする                                      ソース・ファイルがインクルードしているファイルが標準および追加のインクルード・パスで見つからない場合、そのソース・ファイルを再コンパイル／アセンブルするかどうかを選択します。
 バージョン選択                                                                                                                                                              
                                 使用するコンパイラ・パッケージのインストール・フォルダ                    C:\Program Files (x86)\Renesas Electronics\CS+\CC\CC-RL\V1.05.00  使用するコンパイラ・パッケージがインストールされているフォルダです。
                                 使用するコンパイラ・パッケージのバージョン                                常にインストール済みの最新版                                      使用するコンパイラ・パッケージのバージョンです。この設定はすべてのビルド・モードで共通です。
                                 インストール済みのコンパイラ・パッケージの最新バージョン                  V1.05.00                                                          [使用するコンパイラ・パッケージのバージョン]プロパティで、“常にインストール済みの最新版”が選択されていた場合に使用するコンパイラ・パッケージのバージョンです。この設定はすべてのビルド・モードで共通です。
 記録                                                                                                                                                                        
                                 メモ                                                                      メモ[0]                                                           このビルド・ツールに追加するメモです。この設定はすべてのビルド・モードで共通です。
 その他                                                                                                                                                                      
                                 出力メッセージ・フォーマット                                              %TargetFiles%                                                     ビルド中のメッセージのフォーマットを指定します。次のプレースホルダに対応しています。%Program%・・・実行中のプログラム名に置換します。%Options%・・・ビルド実行時のコマンド・ライン・オプションに置換します。%TargetFiles%・・・ビルド中のファイル名に置換します。
                                 ビルド・オプション一覧表示フォーマット                                    %TargetFiles% : %Program% %Options%                               ビルド・オプション一覧の表示フォーマットを指定します。次のプレースホルダに対応しています。%Program%・・・実行中のプログラム名に置換します。%Options%・・・ビルド実行時のコマンド・ライン・オプションに置換します。%TargetFiles%・・・ビルド中のファイル名に置換します。
                                 ビルド前に実行するコマンド                                                ビルド前に実行するコマンド[0]                                     ビルド処理前に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。
                                 ビルド後に実行するコマンド                                                ビルド後に実行するコマンド[0]                                     ビルド処理後に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。
                                 その他の追加オプション                                                                                                                      その他に追加するオプションを入力します。ここで設定したオプションは、ccrlコマンドのオプション群の最後に付加されます。
[コンパイル・オプション]
 デバッグ情報                                                                                                                                                                
                                 デバッグ情報を生成する                                                    はい(-g)                                                          デバッグ情報を生成するかどうかを指定します。デバッガでソース・デバッグを行いたい場合など、プログラムをデバッグする際に生成します。ccrlコマンドの -gオプションに相当します。
                                 最適化時のデバッグ情報強化を行う                                          はい(-g_line)                                                     最適化時のデバッグ情報強化を行うかどうかを指定します。ccrlコマンドの -g_lineオプションに相当します。
 最適化                                                                                                                                                                      
                                 最適化レベル                                                              既定の最適化を行う(なし)                                          コンパイルの最適化レベルを選択します。ccrlコマンドの-Oオプションに相当します。
 最適化(詳細)                                                                                                                                                                
                                 ループ展開最大数                                                                                                                            for、whileなどのループを展開する最大数を指定します。0または1の場合は展開しません。ccrlコマンドの-Ounrollオプションに相当します。
                                 未使用static関数の削除を行う                                              はい(最適化レベルに合わせる)(なし)                                呼び出されないstatic関数の削除を行うかどうかを指定します。ccrlコマンドの-Odelete_static_funcオプションに相当します。
                                 関数のインライン展開を行う                                                はい(最適化レベルに合わせる)(なし)                                関数を呼び出し箇所にインライン展開するかどうかを指定します。ccrlコマンドの-Oinline_levelオプションに相当します。
                                 パイプライン最適化を行う                                                  はい(最適化レベルに合わせる)(なし)                                機械語レベルで命令の並べ替えを行い、プログラムの実行性能を引き出すかどうかを指定します。ccrlコマンドの-Opipelineオプションに相当します。
                                 関数末尾の関数呼び出しにbr命令を使用する                                  はい(最適化レベルに合わせる)(なし)                                関数の末尾が関数呼び出しになっている場合に、call命令の代わりにbr命令を優先的に使用するかどうかを指定します。“はい”を選択することで、retコードを削除し、コード・サイズを小さくすることができます。ただし、一部のデバッグ機能が使えなくなります。ccrlコマンドの -Otail_callオプションに相当します。
                                 大域最適化を行う                                                          いいえ                                                            大域最適化を行うレベルを指定します。詳細はマニュアルを参照して下さい。レベル1：入力ファイルごとに、大域最適化を行います。レベル2：複数の入力ファイルをマージした上で、大域最適化を行います。レベル3：入力ソース・ファイルがプログラムの全体である事を前提に、大域最適化を行います。この前提が崩れた場合には不正なコードを出力する可能性があります。詳しくはマニュアルを参照して下さい。ccrlコマンドの-Owhole_program、-Omerge_filesおよび、-Ointermoduleオプションに相当します。
                                 ポインタ指示先の型を考慮した最適化を行う                                  いいえ                                                            ポインタ指示先の型を考慮した最適化を行うかどうかを選択します。“はい”を指定した場合、一般にはオブジェクト性能が向上しますが、指定しない場合と比べて実行結果が異なる場合があります。ccrlコマンドの-Oaliasオプションに相当します。
                                 複数の同一命令列をサブルーチン化する                                      はい(最適化レベルオプションに合わせる)(なし)                      複数の同一命令列をサブルーチン化するかどうかを選択します。ccrlコマンドの-Osame_codeオプションに相当します。
                                 モジュール間最適化用付加情報を出力する                                    いいえ                                                            モジュール間最適化用付加情報を出力するかどうかを選択します。本オプションを指定したファイルは、リンク時にモジュール間最適化の対象になります。ccrlコマンドの-goptimizeオプションに相当します。
 プリプロセス                                                                                                                                                                
                                 +追加のインクルード・パス                                                 追加のインクルード・パス[2]                                       コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                  [0]                                                                      cg_src                                                            コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                  [1]                                                                      .                                                                 コンパイル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 システム・インクルード・パス                                              システム・インクルード・パス[0]                                   コンパイル時にシステムが設定するインクルード・パスです。システム・インクルード・パスは、追加のインクルード・パスより低い優先度で検索されます。なお、パスはプロジェクト・フォルダを基点とします。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 コンパイル単位の先頭にインクルードするファイル                            コンパイル単位の先頭にインクルードするファイル[0]                 コンパイル単位の先頭にインクルードするファイルを指定します。ccrlコマンドの-preincludeオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 定義マクロ                                                                定義マクロ[0]                                                     定義したいマクロ名を「(マクロ名)=(定義値)」の形式で1行に1つずつ指定します。「=(定義値)」の部分は省略可能で、省略した場合、定義値を1とします。ccrlコマンドの-Dオプションに相当します。
                                 定義解除マクロ                                                            定義解除マクロ[0]                                                 定義解除したいマクロ名を「(マクロ名)」の形式で1行に1つずつ指定します。ccrlコマンドの-Uオプションに相当します。
 品質向上関連                                                                                                                                                                
                                 スタック破壊検出を行う                                                    いいえ(なし)                                                      スタック破壊検出を行うかどうかを指定します。本オプションはProfessional 版でのみ使用可能です。スタック破壊検出は、関数に入る前に有効なスタック領域の外に値を書き込み、関数から出る前に値が書き換えられていないかチェックする機能です。検出時、ユーザ定義の__stack_chk_fail()関数を呼び出します。ccrlコマンドの-stack_protectorと-stack_protector_allオプションに相当します。
 メモリ・モデル                                                                                                                                                              
                                 メモリ・モデル                                                            自動選択(なし)                                                    メモリ・モデルの種類を指定します。“自動選択”は、[CPUコアの指定]プロパティの値により自動で解釈します。（-cpu=S1選択時はsmall、-cpu=S2／S3選択時はmedium。）ccrlコマンドの-memory_modelオプションに相当します。
                                 ROMデータをfar領域に配置する                                              いいえ                                                            ROMデータの配置先を指定します。“いいえ”選択時は、[メモリ・モデル]プロパティ(-memory_model)の値により配置します。ccrlコマンドの-far_romオプションに相当します。
 C言語                                                                                                                                                                       
                                 ANSI規格に厳密に合わせてコンパイルする                                    いいえ                                                            CC-RLの処理を厳密にANSI規格に合わせ、規格に反する記述に対してエラーや警告メッセージを表示するかどうかを指定します。ccrlコマンドの-ansiオプションに相当します。
                                 プロトタイプ宣言されていない関数をチェックする                            いいえ                                                            前もってプロトタイプ宣言がされていない関数を使用した場合、または関数のプロトタイプ宣言を行っていない場合にエラーとするかどうかを選択します。ccrlコマンドの-refs_without_declarationオプションに相当します。
                                 変数の最大サイズを0xffffバイトにする                                      いいえ                                                            変数の最大サイズを0x7fffから0xffffに拡大するかどうかを選択します。ccrlコマンドの-large_variableオプションに相当します。
                                 コメントのネストを許可する                                                いいえ                                                            コメント("/* ... */")のネスト使用を許可するかどうかを選択します。ccrlコマンドの-nest_commentオプションに相当します。
 文字コード                                                                                                                                                                  
                                 文字コード                                                                自動選択(なし)                                                    ソース・ファイル中のコメント、文字列に対して使用する文字コードを指定します。“自動選択”にした場合、日本語OSの時はSJISとして扱い、それ以外のOSでは漢字コードを処理しません。ccrlコマンドの-character_setオプションに相当します。
 出力コード                                                                                                                                                                  
                                 double型／long double型をfloat型として処理する                            はい                                                              double型／long double型をfloat型で扱うかどうかを選択します。ccrlコマンドの-dbl_sizeオプションに相当します。
                                 char型の符号                                                              unsigned char型として扱う(なし)                                   符号指定のないchar 型の符号を選択します。ccrlコマンドの-signed_charオプションに相当します。
                                 ビットフィールド型の符号                                                  符号なし型として扱う(なし)                                        符号指定のないビットフィールド型の符号を選択します。ccrlコマンドの-signed_bitfieldオプションに相当します。
                                 構造体パッキングを行う                                                    いいえ                                                            構造体パッキングを指定します。これにより、構造体メンバをメンバの型に応じてアライメントすることなく、1 バイトでのアライメントを用います。ccrlコマンドの-packオプションに相当します。
                                 外部変数をvolatile化する                                                  いいえ                                                            すべての外部変数および#pragma address指定した変数をvolatile 宣言したものとして扱うかどうかを選択します。ccrlコマンドの-volatileオプションに相当します。
                                 switch文の出力コードの選択                                                自動選択(なし)                                                    プログラム中のswitch文のコード出力方式を指定します。“自動選択”は、ccrlコマンドが最適と思われる形式を自動判断します。ccrlコマンドの-switchオプションに相当します。
                                 文字列定数のマージを行う                                                  いいえ                                                            “はい”を選択した場合、ソース・ファイル内で複数存在する同じ文字列定数をまとめて１つの領域に割り付けます。ccrlコマンドの-merge_stringオプションに相当します。
                                 消費電流測定用のNOP命令挿入を使用する                                     いいえ                                                            消費電流測定用のNOP命令挿入を使用するかどうかを指定します。ccrlコマンドの-insert_nop_with_labelオプションに相当します。
 出力ファイル                                                                                                                                                                
                                 アセンブリ・ソース・ファイルを出力する                                    いいえ                                                            Cソースのコンパイル結果のアセンブリ・ソース・ファイルを出力するかどうかを指定します。ccrlコマンドの-asm_pathオプションに相当します。
                                 プリプロセス処理したソースを出力する                                      いいえ                                                            ソース・ファイルに対し前処理(プリプロセス処理)を実行した結果のファイルを出力するかどうかを選択します。ccrlコマンドの-Pオプションに相当します。
 アセンブル・リスト                                                                                                                                                          
                                 アセンブル・リスト・ファイルを出力する                                    いいえ                                                            アセンブル・リスト・ファイルを出力するかどうかを選択します。ccrlコマンドの-asmopt=-prn_pathオプションに相当します。
 MISRA-Cルール検査                                                                                                                                                           
                                 MISRA-C規格                                                               MISRA-C 2012                                                      MISRA-Cの規格を指定します。
                                 適用するルール                                                            適用ルールなし(なし)                                              適用するMISRA-C:2012ルールを選択します。本オプションはProfessional 版でのみ使用可能です。ccrlコマンドの-misra2012オプションに相当します。
 その他                                                                                                                                                                      
                                 他コンパイラからの移行支援機能を使用する                                  いいえ(なし)                                                      他コンパイラからの移行支援機能を有効にするかどうかを選択します。ccrlコマンドの-convert_ccオプションに相当します。
                                 コンパイル前に実行するコマンド                                            コンパイル前に実行するコマンド[0]                                 コンパイル処理前に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%InputFile%・・・コンパイル対象ファイルの絶対パスに置換します。%CompiledFile%・・・コンパイル時の出力ファイルの絶対パスに置換します。
                                 コンパイル後に実行するコマンド                                            コンパイル後に実行するコマンド[0]                                 コンパイル処理後に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%InputFile%・・・コンパイル対象ファイルの絶対パスに置換します。%CompiledFile%・・・コンパイル時の出力ファイルの絶対パスに置換します。
                                 その他の追加オプション                                                                                                                      その他に追加するコンパイル・オプションを入力します。ここで設定したオプションは、コンパイル・オプション群の最後に付加されます。
[アセンブル・オプション]
 デバッグ情報                                                                                                                                                                
                                 デバッグ情報を生成する                                                    はい(-g)                                                          デバッグ情報を生成するかどうかを指定します。デバッガでソース・デバッグを行いたい場合など、プログラムをデバッグする際に生成します。ccrlコマンドの -gオプションに相当します。
 最適化                                                                                                                                                                      
                                 モジュール間最適化用付加情報を出力する                                    いいえ                                                            モジュール間最適化用付加情報を出力するかどうかを選択します。本オプションを指定したファイルは、リンク時にモジュール間最適化の対象になります。ccrlコマンドの-goptimizeオプションに相当します。
 プリプロセス                                                                                                                                                                
                                 追加のインクルード・パス                                                  追加のインクルード・パス[0]                                       アセンブル時の追加のインクルード・パスを指定します。設定されていない場合、CC-RLの標準フォルダのみ検索します。なお、パスはプロジェクト・フォルダを基点とします。指定したパスは、標準フォルダよりも優先して検索されます。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 システム・インクルード・パス                                              システム・インクルード・パス[0]                                   アセンブル時にシステムが設定するインクルード・パスです。システム・インクルード・パスは、追加のインクルード・パスより低い優先度で検索されます。なお、パスはプロジェクト・フォルダを基点とします。ccrlコマンドの-Iオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName% ・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 定義マクロ                                                                定義マクロ[0]                                                     定義したいマクロ名を「(マクロ名)=(定義値)」の形式で1行に1つずつ指定します。「=(定義値)」の部分は省略可能で、省略した場合、定義値を1とします。ccrlコマンドの-asmopt=-defineオプションに相当します。
                                 定義解除マクロ                                                            定義解除マクロ[0]                                                 定義解除したいマクロ名を「(マクロ名)」の形式で1行に1つずつ指定します。ccrlコマンドの-asmopt=-undefineオプションに相当します。
 文字コード                                                                                                                                                                  
                                 文字コード                                                                自動選択(なし)                                                    ソース・ファイル中のコメント、文字列に対して使用する文字コードを指定します。“自動選択”にした場合、日本語OSの時はSJISとして扱い、それ以外のOSでは漢字コードを処理しません。-character_set=gbk を指定した場合、GB2312として扱います。ccrlコマンドの-character_setオプションに相当します。
                                 数値定数の形式                                                            Prefix形式(なし)                                                  数値定数の基表現形式を指定する。例）Prefix形式：0xFFFF、Suffix形式：FFFFHccrlコマンドの-asmopt=-base_numberオプションに相当します。
 アセンブル・リスト                                                                                                                                                          
                                 アセンブル・リスト・ファイルを出力する                                    いいえ                                                            アセンブル・リスト・ファイルを出力するかどうかを選択します。ccrlコマンドの-asmopt=-prn_pathオプションに相当します。
 その他                                                                                                                                                                      
                                 CA78K0Rアセンブラからの移行支援機能を使用する                             いいえ                                                            CA78K0Rアセンブラからの移行支援機能を有効にするかどうかを選択します。ccrlコマンドの-asmopt=-convert_asmオプションに相当します。
                                 アセンブル前に実行するコマンド                                            アセンブル前に実行するコマンド[0]                                 アセンブル処理前に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%InputFile%・・・アセンブル対象ファイルの絶対パスに置換します。%AssembledFile%・・・アセンブル時の出力ファイルの絶対パスに置換します。
                                 アセンブル後に実行するコマンド                                            アセンブル後に実行するコマンド[0]                                 アセンブル処理後に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%InputFile%・・・アセンブル対象ファイルの絶対パスに置換します。%AssembledFile%・・・アセンブル時の出力ファイルの絶対パスに置換します。
                                 その他の追加オプション                                                                                                                      その他に追加するアセンブル・オプションを入力します。アセンブラはccrl.exe経由で実行されます。必要に応じて-asmopt=を付加してください。ここで設定したオプションは、アセンブル・オプション群の最後に付加されます。
[リンク・オプション]
 デバッグ情報                                                                                                                                                                
                                 デバッグ情報を出力する                                                    はい(出力ファイル内)(-DEBug)                                      デバッグ情報を出力するかどうかを選択します。rlinkコマンドの-NODEBugオプション、-DEBugオプションに相当します。
                                 デバッグ情報を圧縮する                                                    いいえ(-NOCOmpress)                                               デバッグ情報を圧縮するかどうかを選択します。「はい」を選択してデバッグ情報を圧縮すると、デバッガのロード速度が速くなります。「いいえ」を選択するとデバッグ情報を圧縮しませんが、リンク時間が短くなります。rlinkコマンドの-COmpressオプション、-NOCOmpressオプションに相当します。
                                 ローカル・シンボル名情報を消去する                                        いいえ                                                            ローカル・シンボル名情報を消去するかどうかを選択します。rlinkコマンドの-Hideオプションに相当します。
 最適化                                                                                                                                                                      
                                 最適化方法                                                                しない(-NOOPtimize)                                               最適化方法を選択します。rlinkコマンドの-NOOPtimize、-OPtimizeオプションに相当します。
 入力ファイル                                                                                                                                                                
                                 オブジェクト・ファイル                                                    オブジェクト・ファイル[0]                                         オブジェクト・ファイルを「<ライブラリ>(<モジュール>)」の形式で１行に１つずつ指定します。rlinkコマンドの-Inputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 バイナリ・ファイル                                                        バイナリ・ファイル[0]                                             バイナリ・ファイルを「<ファイル名>(<セクション名>[:<アライメント数>][/<セクション属性>][,<シンボル名>])」の形式で１行に１つずつ指定します。指定できるセクション属性は「{CALLT0|CODE|TEXT|TEXTF|TEXTF_UNIT64KP|CONST|CONSTF|SDATA|DATA|DATAF|OPT_BYTE|SECUR_ID}」(CC-RL V1.04以下の場合は「{CODE|DATA}」)になります。指定できるアライメント数は「{1|2|4|8|16|32}」になります。[:<アライメント数>][/<セクション属性>][,<シンボル名>]の部分は省略可能です。省略した場合アライメント数は１とします。rlinkコマンドの-Binaryオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 シンボル定義                                                              シンボル定義[0]                                                   シンボル定義を「<シンボル名>={<シンボル名>|<数値>}」の形式で１行に１つずつ指定します。<数値>は0xなしの16進数で指定してください。rlinkコマンドの-DEFineオプションに相当します。
 出力ファイル                                                                                                                                                                
                                 出力フォルダ                                                              %BuildModeName%                                                   出力フォルダを指定します。空欄の場合は、プロジェクト・フォルダが指定されたものとして扱います。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 出力ファイル名                                                            %ProjectName%.abs                                                 出力ファイル名を指定します。拡張子が省略されている場合は.absが自動的に付加されます。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%ProjectName%・・・プロジェクト名に置換します。
 ライブラリ                                                                                                                                                                  
                                 使用するライブラリ・ファイル                                              使用するライブラリ・ファイル[0]                                   使用するライブラリ・ファイルを指定します。rlinkコマンドの-LIBraryオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 システム・ライブラリ・ファイル                                            システム・ライブラリ・ファイル[0]                                 システム・ライブラリ・ファイルを表示します。rlinkコマンドの-LIBraryオプションに相当します。
                                 標準・数学ライブラリを使用する                                            はい                                                              コンパイラが提供する標準・数学ライブラリを使用するかどうかを選択します。
                                 メモリの解放時にメモリ破壊を検出する                                      いいえ                                                            メモリの解放時にメモリ破壊を検出するかどうかを選択します。本機能はProfessional 版でのみ使用可能です。本機能により、mallocなどで動的に割り当てたメモリを解放または再割り当てする際、不正なアドレスが指定されたり、確保したメモリの領域外に書き込みがあったりした場合に、ユーザ定義の__heap_chk_fail()関数を呼び出します。詳細はコンパイラのユーザーズ・マニュアルを参照してください。rlinkコマンドの-LIBraryオプションに相当します。
                                 ランタイム・ライブラリを使用する                                          はい                                                              コンパイラが提供するランタイム・ライブラリを使用するかどうかを選択します。
 デバイス                                                                                                                                                                    
                                 オンチップ・デバッグの許可／禁止をリンク・オプションで設定する            はい(-OCDBG)                                                      オンチップ・デバッグ用制御値の設定を行う場合に指定します。オンチップ・デバッグ・オプション・バイト制御値を，必ず設定してください。rlinkコマンドの-OCDBGオプションに相当します。
                                 オンチップ・デバッグ・オプション・バイト制御値                            84                                                                オンチップ・デバッグ・オプション・バイトの制御値を0xなしの16進数で指定します。このオプションの詳細に関してはマニュアルを参照してください。オンチップ・デバッグ・オプション・バイト制御値については，必ず，本プロパティ，またはアセンブリ・ソース・ファイルを使用して設定してください。rlinkコマンドの-OCDBGオプションに相当します。
                                 デバッグ・モニタ領域を設定する                                            はい(-DEBUG_MONITOR)                                              デバッグ・モニタ領域を設定するかどうかを指定します。rlinkコマンドの-DEBUG_MONITORオプションに相当します。
                                 ユーザ・オプション・バイトを設定する                                      はい(-USER_OPT_BYTE)                                              ユーザ・オプション・バイトに値を設定する場合に指定します。ユーザ・オプション・バイト値を，必ず設定してください。rlinkコマンドの-USER_OPT_BYTEオプションに相当します。
                                 ユーザ・オプション・バイト値                                              EEFFE8                                                            ユーザ・オプション・バイト値を0xなしの16進数で指定します。ユーザ・オプション・バイト値については，必ず，本プロパティ，またはアセンブリ・ソース・ファイルを使用して設定してください。rlinkコマンドの-USER_OPT_BYTEオプションに相当します。
                                 セルフRAM領域への配置を制御する                                           いいえ                                                            セルフRAM領域への配置制御を指定します。”はい(エラーを表示)(-SELF)”指定時には、セルフRAM領域への配置を禁止し、エラーを出力します。”はい(警告を表示)(-SELFW)”指定時には、セルフRAM領域への配置時にワーニングを出力します。”いいえ”指定時には、セルフRAM領域を内部RAM領域として使用します。rlinkコマンドの-SELF/-SELFWオプションに相当します。
 出力コード                                                                                                                                                                  
                                 実行開始アドレスを指定する                                                いいえ                                                            実行開始アドレスを外部定義シンボルまたはアドレスで指定するかどうかを選択します。rlinkコマンドの-ENTryオプションに相当します。
                                 セクション終端にパディング・データを埋め込む                              いいえ                                                            セクション終端にパディング・データを埋め込むかどうかを選択します。"はい"を選択した場合、セクションサイズが、セクションのアライメントの倍数となるように、セクション終端にデータを埋め込みます。生成するパディングデータの値は0x00 です。rlinkコマンドの-PADDINGオプションに相当します。
                                 特定ベクタ・テーブル・アドレスの領域のアドレス                            特定ベクタ・テーブル・アドレスの領域のアドレス[0]                 ベクタ・テーブルの特定アドレスに対して設定するアドレスを「<ベクタ・テーブル・アドレス> = {<シンボル> | <アドレス>}」の形式で１行に１つずつ指定します。ベクタ・テーブル・アドレス は16進数で0～7Eの範囲で指定してください。<シンボル>は対象関数の外部名で指定してください。アドレスは0xなしの16進数で指定してくださいrlinkコマンドの-VECTNオプションに相当します。
                                 ベクタ・テーブルの空き領域のアドレス                                                                                                        ベクタ・テーブルの空き領域のアドレスを「{<シンボル>|<アドレス>}」の形式で指定します。アドレスは0xなしの16進数で指定してください。rlinkコマンドの-VECTオプションに相当します。
 リスト                                                                                                                                                                      
                                 リンク・マップ・ファイルを出力する                                        はい(リスト内容=選択)(-LISt)                                      リンク・マップ・ファイルを出力するかどうかを選択します。rlinkコマンドの-LIStオプション、-SHowオプションに相当します。
                                 出力ファイル名                                                            %ProjectName%.map                                                 リンク・マップ・ファイルの出力ファイル名を指定します。拡張子が省略されている場合は.mapが自動的に付加されます。rlinkコマンドの-LIStオプションに相当します。主に次のプレースホルダに対応しています。%ProjectName%・・・プロジェクト名に置換します。
                                 シンボル情報を出力する                                                    いいえ                                                            シンボル情報を出力するかどうかを選択します。rlinkコマンドの-SHow=SYmbolオプションに相当します。
                                 シンボルの参照回数を出力する                                              いいえ                                                            シンボルの参照回数を出力するかどうかを選択します。rlinkコマンドの-SHow=Referenceオプションに相当します。
                                 クロス・リファレンス情報を出力する                                        いいえ                                                            クロス・リファレンス情報を出力するかどうかを選択します。rlinkコマンドの-SHow=Xreferenceオプションに相当します。
                                 セクションの合計サイズを出力する                                          いいえ                                                            セクションの合計サイズを出力するかどうかを選択します。rlinkコマンドの-SHow=Total_sizeオプションに相当します。
                                 ベクタ情報を出力する                                                      いいえ                                                            ベクタ情報を出力するかどうかを選択します。rlinkコマンドの-SHow=VECTORオプションに相当します。
                                 構造体/共用体のメンバ情報を出力する                                       いいえ                                                            構造体/共用体のメンバ情報を出力するかどうかを指定します。出力するには、コンパイル時に-g オプションの指定が必要です。rlinkコマンドの-SHow=STRUCTオプションに相当します。
                                 セクションに対応する再配置属性を出力する                                  いいえ                                                            セクションに対応する再配置属性を出力するかどうかを指定します。rlinkコマンドの-SHow=RELOCATION_ATTRIBUTEオプションに相当します。
 変数／関数配置情報                                                                                                                                                          
                                 変数／関数情報ヘッダ・ファイルを出力する                                  いいえ                                                            変数／関数情報ヘッダ・ファイルを出力するかどうかを選択します。“はい”を選択した場合は、以下の順番でコマンドを呼び出します。1度のビルド処理で、コンパイラとアセンブラのコマンドを2回呼び出します。[順番]1. コンパイラ(CC-RL)2. アセンブラ(CC-RL)3. リンカ(rlink) -VFINFO4. コンパイラ(CC-RL) -preinclude=<変数／関数情報ヘッダ・ファイル>5. アセンブラ(CC-RL)6. リンカ(rlink)出力した変数／関数情報ヘッダ・ファイルを編集して使う場合は、本プロパティを“いいえ”に変更し、[コンパイルオプション]タブの[コンパイル単位の先頭にインクルードするファイル]プロパティで、編集したファイルを指定してください。rlinkコマンドの-VFINFOオプションに相当します。
 セクション                                                                                                                                                                  
                                 セクションを自動的に配置する                                              はい(-AUTO_SECTION_LAYOUT)                                        セクションを自動的に配置します。rlinkコマンドの-AUTO_SECTION_LAYOUTオプションに相当します。
                                 セクションの開始アドレス                                                                                                                    セクションの開始アドレスを指定します。rlinkコマンドの-STARtオプションに相当します。
                                 外部定義シンボルをファイル出力するセクション                              外部定義シンボルをファイル出力するセクション[0]                   外部定義シンボルをファイル出力するセクションを「<セクション名>」形式で1行に1つずつ指定します。rlinkコマンドの-FSymbolオプションに相当します。
                                 +ROMからRAMへマップするセクション                                         ROMからRAMへマップするセクション[2]                               ROMからRAMへマップするセクションを「<ROM セクション名>=<RAM セクション名>」の形式で１行に１つずつ指定します。rlinkコマンドの-ROmオプションに相当します。
                                  [0]                                                                      .data=.dataR                                                      ROMからRAMへマップするセクションを「<ROM セクション名>=<RAM セクション名>」の形式で１行に１つずつ指定します。rlinkコマンドの-ROmオプションに相当します。
                                  [1]                                                                      .sdata=.sdataR                                                    ROMからRAMへマップするセクションを「<ROM セクション名>=<RAM セクション名>」の形式で１行に１つずつ指定します。rlinkコマンドの-ROmオプションに相当します。
 ベリファイ                                                                                                                                                                  
                                 セクションの割り付けアドレスをチェックする                                いいえ                                                            セクションの割り付けアドレスをチェックするかどうかを選択します。rlinkコマンドの-CPuオプションに相当します。
                                 デバイス・ファイルの指定をチェックする                                    いいえ                                                            デバイス・ファイルの指定をチェックするかどうかを指定します。“はい”を選択すると入力ファイルを作成したデバイス・ファイル、およびデバイス・ファイル指定オプションで、デバイス・ファイルが同一であるかチェックします。rlinkコマンドの-CHECK_DEVICEオプションに相当します。
                                 (64K-1)バイト境界を跨ぐセクション配置のチェックを抑止する                 いいえ                                                            (64K-1)バイト境界を跨ぐセクション配置のチェックを抑止するかどうかを指定します。セクションが（64K-1）バイト境界をまたいで配置されるとは，セクションのアドレスの下位16 ビットが0xFFFEを超えて0xFFFF に続くことを意味します。rlinkコマンドの-CHECK_64K_ONLYオプションに相当します。
                                 セクションのメモリ配置の整合性チェックを行わない                          いいえ                                                            セクションのメモリ配置の整合性チェックを行わないかどうかを指定します。rlinkコマンドの-NO_CHECK_SECTION_LAYOUTオプションに相当します。
 メッセージ                                                                                                                                                                  
                                 インフォメーション・メッセージ出力を有効にする                            いいえ(-NOMessage)                                                インフォメーション・メッセージ出力を有効にするかどうかを選択します。rlinkコマンドの-NOMessageオプション、-Messageオプションに相当します。
                                 抑止するインフォメーション・メッセージの番号                                                                                                抑止するインフォメーション・メッセージの番号を「<メッセージ番号>」の形式で指定します。抑止するメッセージ番号の範囲を指定する場合は「<メッセージ番号>-<メッセージ番号>」の形式で指定してください。複数指定する場合は「,」で区切ってください。rlinkコマンドの-NOMessageオプションに相当します。
                                 ワーニング・メッセージをインフォメーション・メッセージに変更する          いいえ                                                            ワーニング・メッセージをインフォメーション・メッセージに変更するかどうかを選択します。rlinkコマンドの-CHange_messageオプションに相当します。
                                 インフォメーション・メッセージをワーニング・メッセージに変更する          いいえ                                                            インフォメーション・メッセージをワーニング・メッセージに変更するかどうかを選択します。rlinkコマンドの-CHange_messageオプションに相当します。
                                 インフォメーション、ワーニング・メッセージをエラー・メッセージに変更する  いいえ                                                            インフォメーション、ワーニング・メッセージをエラー・メッセージに変更するかどうかを選択します。rlinkコマンドの-CHange_messageオプションに相当します。
 その他                                                                                                                                                                      
                                 スタック情報ファイルを出力する                                            いいえ                                                            スタック情報ファイルを出力するかどうかを選択します。rlinkコマンドの-STACkオプションに相当します。
                                 リンカのメモリ使用量を削減する                                            いいえ(-MEMory=High)                                              リンカのメモリ使用量を削減するかどうかを選択します。大規模なプロジェクトをリンクした際、リンカのメモリ使用量が稼動PCの実装メモリ量を越えてしまい、動作が遅くなっているような場合には"はい(-memory=low)" オプション指定をお試しください。rlinkコマンドの-MEMoryオプションに相当します。
                                 合計セクション・サイズを表示する                                          いいえ                                                            合計セクション・サイズを表示するかどうかを選択します。rlinkコマンドの-Total_sizeオプションに相当します。
                                 コピーライト情報を表示する                                                いいえ(-NOLOgo)                                                   コピーライト情報を表示するかどうかを選択します。rlinkコマンドの-LOgoオプション、-NOLOgoオプションに相当します。
                                 リンク前に実行するコマンド                                                リンク前に実行するコマンド[0]                                     リンク処理前に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%LinkedFile%・・・リンク処理時の出力ファイルの絶対パスに置換します。
                                 リンク後に実行するコマンド                                                リンク後に実行するコマンド[0]                                     リンク処理後に実行するコマンドを指定します。バッチファイルを指定する時は”call a.bat”のようにcall命令を使用してください。また、先頭行に“#!python”と記述することで、2行目から最終行までの内容をPythonコマンドとして実行します。主に次のプレースホルダに対応しています。%ProjectDir%・・・プロジェクト・フォルダの絶対パスに置換します。%OutputDir%・・・出力フォルダの絶対パスに置換します。%OutputFile%・・・出力ファイルの絶対パスに置換します。%LinkedFile%・・・リンク処理時の出力ファイルの絶対パスに置換します。
                                 その他の追加オプション                                                                                                                      その他に追加するリンク・オプションを入力します。ここで設定したオプションは、リンク・オプション群の最後に付加されます。
[ヘキサ出力オプション]
 出力ファイル                                                                                                                                                                
                                 ヘキサ・ファイルを出力する                                                はい                                                              ヘキサ・ファイルを出力するかどうかを選択します。rlinkコマンドの-FOrmオプションに相当します。
                                 出力フォルダ                                                              %BuildModeName%                                                   ヘキサ・ファイル出力フォルダを指定します。空欄の場合は、プロジェクト・フォルダが指定されたものとして扱います。rlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
                                 出力ファイル名                                                            %ProjectName%.mot                                                 ヘキサ・ファイル名を指定します。拡張子が省略されている場合は[ヘキサ・ファイル・フォーマット]プロパティに依存し、自動的に付加します。”インテル拡張ヘキサ・ファイル(-FOrm=Hexadecimal)”：.hex”モトローラ・Sタイプ・ファイル(-FOrm=Stype)”：.mot”バイナリ・ファイル(-FOrm=Binary)”：.binrlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%ProjectName%・・・プロジェクト名に置換します。
                                 分割出力ファイル                                                          分割出力ファイル[0]                                               ヘキサ・ファイルを「<ファイル名>{=<先頭アドレス>-<終了アドレス>|<セクション名>[:...]}」の形式で１行に１つずつ指定します。アドレスは0xなしの16進数で指定してください。拡張子が省略されている場合は[ヘキサ・ファイル・フォーマット]プロパティに依存し、自動的に付加します。”インテル拡張ヘキサ・ファイル(-FOrm=Hexadecimal)”：.hex”モトローラ・Sタイプ・ファイル(-FOrm=Stype)”：.mot”バイナリ・ファイル(-FOrm=Binary)”：.binrlinkコマンドの-OUtputオプションに相当します。主に次のプレースホルダに対応しています。%BuildModeName%・・・ビルド・モード名に置換します。%ProjectName%・・・プロジェクト名に置換します。%MicomToolPath%・・・本製品のインストール・フォルダの絶対パスに置換します。
 ヘキサ・フォーマット                                                                                                                                                        
                                 ヘキサ・ファイル・フォーマット                                            モトローラ・Sタイプ・ファイル(-FOrm=Stype)                        ヘキサ・ファイル・フォーマットを選択します。rlinkコマンドの-FOrmオプションに相当します。
                                 レコード・サイズを統一する                                                いいえ                                                            レコード・サイズを統一するかどうかを選択します。rlinkコマンドの-REcordオプションに相当します。
                                 エンド・レコードの指定                                                    指定しない(なし)                                                  モトローラ・Sタイプ・ファイルのエンド・レコードを指定します。rlinkコマンドの-END_RECORDオプションに相当します。
                                 S9レコードを終端に出力する                                                いいえ                                                            S9レコードを終端に出力するかどうかを選択します。rlinkコマンドの-S9オプションに相当します。
 CRC演算                                                                                                                                                                     
                                 CRC演算結果を出力する                                                     いいえ                                                            CRC(Cyclic Redundancy Check)演算結果の出力を選択します。rlinkコマンドの-CRcオプションに相当します。
 メッセージ                                                                                                                                                                  
                                 メッセージ関連の設定をリンク・オプション・タブと同じにする                はい                                                              メッセージ関連の設定を［リンク・オプション］タブと同じにするかどうかを選択します。
 その他                                                                                                                                                                      
                                 その他の追加オプション                                                                                                                      その他に追加するヘキサ出力オプションを入力します。ここで設定したオプションは、ヘキサ出力オプション群の最後に付加されます。
[I/Oヘッダ・ファイル生成オプション]
 I/Oヘッダ・ファイル                                                                                                                                                         
                                 ビルド時にI/Oヘッダ・ファイルを更新する                                   いいえ                                                            ビルド時にI/Oヘッダ・ファイルを更新するかどうかを選択します。デバイス・ファイルがI/Oヘッダ・ファイル生成時より新しい場合やI/Oヘッダ・ファイル生成関連のプロパティが更新されている場合、I/Oヘッダ・ファイルを更新します。この内容はすべてのビルド・モードで共通です。
                                 1ビット・アクセスを出力する                                               はい                                                              I/Oヘッダ・ファイルに1ビット単位のIORアクセス用マクロ定義を出力するかどうかを選択します。この内容はすべてのビルド・モードで共通です。
                                 MISRA-Cオプションを有効にする                                             いいえ                                                            MISRA-Cに適合したヘッダ・ファイルを出力するかどうかを選択します。
                                 デバイス・ファイル名の定義マクロを出力する                                いいえ                                                            CA78K0Rではあらかじめ定義されたマクロ名として扱われていた、以下の定義マクロを出力するかどうかを指定します。#define <デバイス・ファイル名マクロ> 1
 その他                                                                                                                                                                      
                                 その他の追加オプション                                                                                                                      その他に追加するI/Oヘッダ・ファイル生成オプションを入力します。ここで設定したオプションは、I/Oヘッダ・ファイル生成オプション群の最後に付加されます。
